Here’s an extended list of Python exam questions for **lists**, **dictionaries**, and **strings**:

---

### **Lists**
4. **Basic:**
   - Write a Python program to:
     - Create a list of the first 10 multiples of 3.
     - Check if the number 15 is in the list.
     - Insert the number 7 at the second position of the list.

5. **Intermediate:**
   - Write a Python program that takes a list of integers and removes all duplicate values.
   - Given the list: `fruits = ["apple", "banana", "cherry", "banana", "apple"]`, write a program to:
     - Count the occurrence of each fruit.
     - Sort the list alphabetically.

6. **Advanced:**
   - Write a Python function that rotates a list by `n` positions. For example:
     - Input: `lst = [1, 2, 3, 4, 5], n = 2`
     - Output: `[4, 5, 1, 2, 3]` (if rotated to the right).
   - Write a program that splits a list into two halves and swaps them. For example:
     - Input: `[1, 2, 3, 4, 5, 6]`
     - Output: `[4, 5, 6, 1, 2, 3]`

---

### **Dictionaries**
4. **Basic:**
   - Write a program to create a dictionary from two lists:
     `keys = ['name', 'age', 'city']` and `values = ['Alice', 25, 'New York']`.
   - Given a dictionary: `person = {"name": "John", "age": 30}`, write a program to:
     - Check if the key `"age"` exists in the dictionary.
     - Print the value of the `"name"` key.

5. **Intermediate:**
   - Write a Python program to count the frequency of words in a sentence using a dictionary.
     For example: `"hello world hello"` → `{'hello': 2, 'world': 1}`.
   - Given the dictionary:
     `scores = {"Math": 88, "Science": 92, "English": 85}`, write a program to:
     - Print the subject with the lowest score.
     - Add a new subject `"History": 90`.

6. **Advanced:**
   - Write a Python function that takes a dictionary where keys are strings and values are lists, and returns a dictionary with the same keys but sorted lists as values.
     Example input: `{"a": [3, 1, 2], "b": [5, 4]} → {"a": [1, 2, 3], "b": [4, 5]}`.
   - Write a program that finds the intersection of two dictionaries.
     For example:
     - Dict1: `{"a": 1, "b": 2, "c": 3}`
     - Dict2: `{"b": 2, "c": 4, "d": 5}`
     - Output: `{"b": 2}`.

---

### **Strings**
4. **Basic:**
   - Write a Python program to:
     - Remove all spaces from the string `"Python Programming is Fun"`.
     - Find the first occurrence of the letter `"o"` in `"hello world"`.
     - Convert the string `"12345"` into an integer.

5. **Intermediate:**
   - Write a Python program to:
     - Reverse the string `"Python"`.
     - Remove all vowels from the string `"Hello, World!"`.
     - Split the string `"apple,banana,cherry"` into a list of fruits.

6. **Advanced:**
   - Write a Python function that checks if two strings are anagrams (contain the same characters in the same frequency).
     Example: `"listen"` and `"silent"` → True.
   - Write a program that extracts all the digits from a string. For example:
     Input: `"abc123xyz456"` → Output: `[1, 2, 3, 4, 5, 6]`.

---

Let me know if you'd like even more specific or advanced questions!


Here are additional Python exam questions incorporating **text files**. These exercises are designed to practice reading from and writing to text files, combined with operations on lists, dictionaries, and strings:

---

### **File-Based Questions**
1. **Basic:**
   - Write a Python program to:
     - Create a text file named `data.txt` and write the following lines into it:
       ```
       Python is fun.
       Programming is creative.
       Learning is continuous.
       ```
     - Read and print the content of the file line by line.

2. **Intermediate:**
   - Write a Python program that reads a file `names.txt` containing one name per line (e.g., `"Alice\nBob\nCharlie"`) and:
     - Stores all names in a list.
     - Prints the total number of names.
     - Prints the names in alphabetical order.

3. **Advanced:**
   - Write a Python program that reads a file `numbers.txt` containing integers (one per line) and:
     - Stores the integers in a list.
     - Calculates and prints the sum of all numbers.
     - Finds and prints the largest and smallest numbers.

---

### **Integrating Files with Lists**
4. **Basic:**
   - Write a program to read a file `fruits.txt` containing names of fruits (one per line), and:
     - Append a new fruit name (e.g., `"Mango"`) to the file.
     - Read and print the updated content of the file.

5. **Intermediate:**
   - Write a program to read a file `scores.txt` containing student scores in the format:
     ```
     Alice, 85
     Bob, 78
     Charlie, 92
     ```
     - Store the data in a dictionary with names as keys and scores as values.
     - Print the name of the student with the highest score.

6. **Advanced:**
   - Write a Python program that reads a file `sentences.txt` containing multiple sentences and:
     - Splits each sentence into words and stores them in a list.
     - Counts the total number of words.
     - Finds the longest word in the file.

---

### **Integrating Files with Dictionaries**
7. **Basic:**
   - Create a file `employees.txt` containing data in the format:
     ```
     John, Developer
     Alice, Manager
     Bob, Analyst
     ```
     - Write a program to read the file and create a dictionary where the keys are names and the values are job titles.
     - Print the dictionary.

8. **Intermediate:**
   - Write a program to read a file `products.txt` containing product data in the format:
     ```
     ProductA, 100
     ProductB, 200
     ProductC, 150
     ```
     - Store the data in a dictionary with product names as keys and prices as values.
     - Calculate the total value of all products.

9. **Advanced:**
   - Write a program to merge two files, `file1.txt` and `file2.txt`, containing dictionaries stored in JSON-like format. Example:
     ```
     file1.txt: {"a": 1, "b": 2}
     file2.txt: {"b": 3, "c": 4}
     ```
     - Merge the dictionaries and handle overlapping keys by summing their values. Save the result to a new file `merged.txt`.

---

### **Integrating Files with Strings**
10. **Basic:**
    - Write a program to read a file `paragraph.txt` and:
      - Count the number of characters in the file.
      - Count the number of sentences (assume sentences end with `.`).
      - Count the number of words.

11. **Intermediate:**
    - Write a Python program to search for a specific word in a file `document.txt` and:
      - Count how many times the word occurs.
      - Replace all occurrences of the word with another word and save the updated content to a new file `updated_document.txt`.

12. **Advanced:**
    - Write a Python program that reads a file `log.txt` containing log entries in the format:
      ```
      2025-01-01 INFO Starting application
      2025-01-01 ERROR Failed to connect
      2025-01-02 INFO Process completed
      ```
      - Extract and count the number of log entries for each level (`INFO`, `ERROR`, etc.).
      - Save the counts to a file `log_summary.txt`.

---

These questions combine file handling with Python concepts, providing real-world-like scenarios to test practical programming skills. Let me know if you'd like further refinement!